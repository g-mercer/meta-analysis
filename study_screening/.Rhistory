for (j in 2:nrow(yes)) {
if (yes [2, colnames(yes) == "TITLE"] == yes [j, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [1, ])
}
}
View(yes_dupli_filt)
rm(yes_dupli_filt)
yes_dupli_filt <- tibble()
for (j in 3:nrow(yes)) {
if (yes [2, colnames(yes) == "TITLE"] == yes [j, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [2, ])
}
}
for (j in 2:nrow(yes)) {
if (yes [1, colnames(yes) == "TITLE"] == yes [j, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [1, ])
}
}
# filter duplicates
yes_dupli_filt <- tibble()
for (i in 1:nrow(yes)) {
for (j in 1:nrow(yes)) {
if (yes [i, colnames(yes) == "TITLE"] == yes [j+1, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [i, ])
}
}
}
1:nrow(yes)
1:nrow(yes)-1
yes_dupli_filt <- tibble()
for (i in 1:nrow(yes)) {
for (j in 1:nrow(yes)-1) {
if (yes [i, colnames(yes) == "TITLE"] == yes [j+1, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [i, ])
}
}
}
View(yes_dupli_filt)
i <- 1
j <- 1
rm(yes_dupli_filt)
yes_dupli_filt <- tibble()
for (j in 1:nrow(yes)-1) {
if (yes [i, colnames(yes) == "TITLE"] == yes [j+1, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [i, ])
}
}
View(yes_dupli_filt)
rm(yes_dupli_filt)
for (j in 1:nrow(yes)-1) {
if (yes [i, colnames(yes) == "TITLE"] == yes [j+1, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [j, ])
}
}
yes_dupli_filt <- tibble()
for (j in 1:nrow(yes)-1) {
if (yes [i, colnames(yes) == "TITLE"] == yes [j+1, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [j, ])
}
}
for (j in 1:nrow(yes)-1) {
if (yes [i, colnames(yes) == "TITLE"] == yes [j+1, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [j+1, ])
}
}
View(yes_dupli_filt)
1:nrow(yes)-1
1:(nrow(yes)-1)
View(yes)
unique(yes$TITLE)
which(unique(yes))
unique(yes$TITLE)
rm(yes_dupli_filt)
wos <- read.csv("./guy_screening/effort_Guy_wos.csv")
scopus <- read.csv("./guy_screening/effort_Guy_scopus.csv")
combined <- rbind(wos, scopus)
# take only Ys
yes <- combined [grep("YES", combined$INCLUDE),]
rownames(yes) <- 1:nrow(yes)
library(tidyverse)
# filter duplicates
yes_dupli_filt <- tibble()
for (i in 1:nrow(yes)) {
for (j in 1:(nrow(yes))) {
if (yes [i, colnames(yes) == "TITLE"] == yes [i+j, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [i, ])
}
}
}
# filter duplicates
yes_dupli_filt <- tibble()
for (i in 1:(nrow(yes)-1)) {
for (j in 1:(nrow(yes))) {
if (yes [i, colnames(yes) == "TITLE"] == yes [i+j, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [i, ])
}
}
}
which(yes$TITLE)
which(yes$TITLE, unique())
rm(list=ls())
wos <- read.csv("./guy_screening/effort_Guy_wos.csv")
scopus <- read.csv("./guy_screening/effort_Guy_scopus.csv")
combined <- rbind(wos, scopus)
# take only Ys
yes <- combined [grep("YES", combined$INCLUDE),]
rownames(yes) <- 1:nrow(yes)
library(tidyverse)
# filter duplicates
yes_dupli_filt <- tibble()
for (i in 1:nrow(yes)) {
for (j in (i+1):(nrow(yes))) {
if (yes [i, colnames(yes) == "TITLE"] == yes [j, colnames(yes) == "TITLE"]) {
yes_dupli_filt <- rbind(yes_dupli_filt, yes [i, ])
}
}
}
View(yes_dupli_filt)
order(yes$TITLE)
sort(yes$TITLE)
order(yes$TITLE [!duplicated(sort(yes$TITLE))])
length(order(yes$TITLE [!duplicated(sort(yes$TITLE))]))
sort(yes$TITLE)
duplicated(sort(yes$TITLE))
yes$TITLE [duplicated(sort(yes$TITLE))]
order(unique(yes))
order(unique(yes$TITLE))
length(order(unique(yes$TITLE)))
length(order(yes$TITLE [!duplicated(sort(yes$TITLE))]))
length(order(unique(yes$TITLE)))
order(yes$TITLE [!duplicated(sort(yes$TITLE))])
order(unique(yes$TITLE))
sort(order(yes$TITLE [!duplicated(sort(yes$TITLE))]))
order(yes$TITLE [!duplicated(sort(yes$TITLE))])
sort(order(yes$TITLE [!duplicated(sort(yes$TITLE))]))
order(yes$TITLE [!duplicated(sort(yes$TITLE))])
order(unique(yes$TITLE))
sort(order(unique(yes$TITLE)))
vec <- c("d", "b", "b", "c", "c")
order(vec [!duplicated(sort(vec))])
order(vec) [!duplicated(sort(vec))]
order(yes$TITLE)
order(yes$TITLE) [!duplicated(sort(yes$TITLE))]
sort(order(yes$TITLE) [!duplicated(sort(yes$TITLE))])
order(yes$TITLE) [!duplicated(sort(yes$TITLE))]
sort(order(yes$TITLE) [!duplicated(sort(yes$TITLE))])
order(yes$TITLE) [unique(yes$TITLE)]
sort(order(yes$TITLE) [!duplicated(sort(yes$TITLE))])
length(order(yes$TITLE) [!duplicated(sort(yes$TITLE))])
sort(yes$TITLE)
!duplicated(sort(yes$TITLE))
duplicated(sort(yes$TITLE))
yes [!duplicated(sort(yes$TITLE))]
yes [!duplicated(sort(yes$TITLE)), ]
test <- yes [!duplicated(sort(yes$TITLE)), ]
View(test)
test <- yes [duplicated(sort(yes$TITLE)), ]
View(yes)
test <- order(yes$TITLE) [duplicated(sort(yes$TITLE)), ]
View(scopus)
View(test)
test <- order(yes$TITLE) [duplicated(sort(yes$TITLE))]
testing <- yes [test, ]
View(testing)
rm(list=ls())
wos <- read.csv("./guy_screening/effort_Guy_wos.csv")
scopus <- read.csv("./guy_screening/effort_Guy_scopus.csv")
combined <- rbind(wos, scopus)
# take only Ys
yes <- combined [grep("YES", combined$INCLUDE),]
rownames(yes) <- 1:nrow(yes)
library(tidyverse)
no_duplicates <- yes [order(yes$TITLE) [duplicated(sort(yes$TITLE))], ]
no_duplicates <- yes [order(yes$TITLE) [!duplicated(sort(yes$TITLE))], ]
order(yes$TITLE)
!duplicated(sort(yes$TITLE))
order(yes$TITLE)
!duplicated(sort(yes$TITLE))]
!duplicated(sort(yes$TITLE))]
!duplicated(sort(yes$TITLE))
rm(list=ls())
wos <- read.csv("./guy_screening/effort_Guy_wos.csv")
scopus <- read.csv("./guy_screening/effort_Guy_scopus.csv")
combined <- rbind(wos, scopus)
# take only Ys
yes <- combined [grep("YES", combined$INCLUDE),]
rownames(yes) <- 1:nrow(yes)
no_duplicates <- yes [order(yes$TITLE) [!duplicated(sort(yes$TITLE))], ]
View(no_duplicates)
titles <- yes$TITLE
gsub
?gsub()
titles_test <- gsub(pattern = "[[:upper:]]", replacement = "[[:lower:]]", titles)
head(titles_test)
titles <- tolower(yes$TITLE)
rm(titles_test)
head(titles)
head(yes$TITLE)
rm(list=ls())
wos <- read.csv("./guy_screening/effort_Guy_wos.csv")
scopus <- read.csv("./guy_screening/effort_Guy_scopus.csv")
combined <- rbind(wos, scopus)
# take only Ys
yes <- combined [grep("YES", combined$INCLUDE),]
rownames(yes) <- 1:nrow(yes)
# make everything lower case
yes$TITLE <- tolower(yes$TITLE)
View(yes)
no_duplicates <- yes [order(yes$TITLE) [!duplicated(sort(yes$TITLE))], ]
View(no_duplicates)
yes$TITLE <- gsub(pattern = "-", replacement = " ", x = yes$TITLE)
yes$TITLE <- gsub(pattern = ",", replacement = "", x = yes$TITLE)
rm(list=ls())
wos <- read.csv("./guy_screening/effort_Guy_wos.csv")
scopus <- read.csv("./guy_screening/effort_Guy_scopus.csv")
combined <- rbind(wos, scopus)
# take only Ys
yes <- combined [grep("YES", combined$INCLUDE),]
rownames(yes) <- 1:nrow(yes)
# make everything lower case
yes$TITLE <- tolower(yes$TITLE)
# replace "-" with " " and ," with ""
yes$TITLE <- gsub(pattern = "-", replacement = " ", x = yes$TITLE)
yes$TITLE <- gsub(pattern = ",", replacement = "", x = yes$TITLE)
# remove duplicates
no_duplicates <- yes [order(yes$TITLE) [!duplicated(sort(yes$TITLE))], ]
View(no_duplicates)
head(sort(no_duplicates$TITLE))
head(order(no_duplicates$TITLE))
head(no_duplicates$TITLE)
write.csv("./no_duplicates.csv")
write.csv("./no_duplicates.csv", no_duplicates)
write.csv(file = "no_duplicates.csv", x = no_duplicates)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
nagy_refs <- read.csv("./input/nagy_review_references.csv")
nagy_refs <- read.csv("./input/nagy_review_references.csv")
effort_distribute(nagy_refs,
reviewers = "Guy",
initialize = TRUE,
save_split = TRUE)
library(metagear)
nagy_refs <- read.csv("./input/nagy_review_references.csv")
effort_distribute(nagy_refs,
reviewers = "Guy",
initialize = TRUE,
save_split = TRUE)
abstract_screener("effort_Guy_nagy_review_refs.csv",
"Guy",
highlightKeywords = c("toxic", "effect", "mortal", "viab", "endpoint", "end point", "oxid",
"cell cycle", "dna damage", "apop", "necro", "sensitiv", "growth", "surviv",
"aberra", "health", "fitness", "output", "reproduct", "develop", "behaviour",
"behavior", "fecundity", "offspring", "pesticid", "herbicid", "insecticid",
"fungicid", "acaricid", "miticid", "nematicid", "molluscicid", "rodenticid",
"agrochem", "active ingredient", "active substance", "active principle",
"active component", "active constituent", "active pesticide", "active agent",
"active compound", "pure ingredient", " pure substance", "pure principle",
"pure component", "pure constituent", "pure pesticide", "pure agent",
"pure compound", "technical ingredient", "technical substance",
"technical principle", "technical component", "technical constituent",
"technical pesticide", "technical agent", "technical compound",
"technical grade", "fundamental substance", "co formulant", "formulation",
"formulant", "formulated", "commercial form", "commercial product",
"commercial mixture", "inactive ingredient", "inert ingredient",
"adjuvant", "safener", "additive", "surfactant", "technical formulation",
"technical mixture"))
rm(list = ls()))
rm(list = ls()))
rm(list=ls())
nagy_refs <- read.csv("./input/nagy_review_references.csv")
library(metagear)
effort_distribute(nagy_refs,
reviewers = "Guy",
initialize = TRUE,
save_split = TRUE)
abstract_screener("effort_Guy_nagy_review_refs.csv",
"Guy",
highlightKeywords = c("toxic", "effect", "mortal", "viab", "endpoint", "end point", "oxid",
"cell cycle", "dna damage", "apop", "necro", "sensitiv", "growth", "surviv",
"aberra", "health", "fitness", "output", "reproduct", "develop", "behaviour",
"behavior", "fecundity", "offspring", "pesticid", "herbicid", "insecticid",
"fungicid", "acaricid", "miticid", "nematicid", "molluscicid", "rodenticid",
"agrochem", "active ingredient", "active substance", "active principle",
"active component", "active constituent", "active pesticide", "active agent",
"active compound", "pure ingredient", " pure substance", "pure principle",
"pure component", "pure constituent", "pure pesticide", "pure agent",
"pure compound", "technical ingredient", "technical substance",
"technical principle", "technical component", "technical constituent",
"technical pesticide", "technical agent", "technical compound",
"technical grade", "fundamental substance", "co formulant", "formulation",
"formulant", "formulated", "commercial form", "commercial product",
"commercial mixture", "inactive ingredient", "inert ingredient",
"adjuvant", "safener", "additive", "surfactant", "technical formulation",
"technical mixture"))
abstract_screener("effort_Guy_nagy_review_refs.csv",
"Guy",
highlightKeywords = c("toxic", "effect", "mortal", "viab", "endpoint", "end point", "oxid",
"cell cycle", "dna damage", "apop", "necro", "sensitiv", "growth", "surviv",
"aberra", "health", "fitness", "output", "reproduct", "develop", "behaviour",
"behavior", "fecundity", "offspring", "pesticid", "herbicid", "insecticid",
"fungicid", "acaricid", "miticid", "nematicid", "molluscicid", "rodenticid",
"agrochem", "active ingredient", "active substance", "active principle",
"active component", "active constituent", "active pesticide", "active agent",
"active compound", "pure ingredient", " pure substance", "pure principle",
"pure component", "pure constituent", "pure pesticide", "pure agent",
"pure compound", "technical ingredient", "technical substance",
"technical principle", "technical component", "technical constituent",
"technical pesticide", "technical agent", "technical compound",
"technical grade", "fundamental substance", "co formulant", "formulation",
"formulant", "formulated", "commercial form", "commercial product",
"commercial mixture", "inactive ingredient", "inert ingredient",
"adjuvant", "safener", "additive", "surfactant", "technical formulation",
"technical mixture"))
nagy_cited <- read.csv("./input/nagy_review_cited.csv")
library(metagear)
effort_distribute(nagy_cited,
reviewers = "Guy",
initialize = TRUE,
save_split = TRUE)
abstract_screener("effort_Guy_nagy_review_cited.csv",
"Guy",
highlightKeywords = c("toxic", "effect", "mortal", "viab", "endpoint", "end point", "oxid",
"cell cycle", "dna damage", "apop", "necro", "sensitiv", "growth", "surviv",
"aberra", "health", "fitness", "output", "reproduct", "develop", "behaviour",
"behavior", "fecundity", "offspring", "pesticid", "herbicid", "insecticid",
"fungicid", "acaricid", "miticid", "nematicid", "molluscicid", "rodenticid",
"agrochem", "active ingredient", "active substance", "active principle",
"active component", "active constituent", "active pesticide", "active agent",
"active compound", "pure ingredient", " pure substance", "pure principle",
"pure component", "pure constituent", "pure pesticide", "pure agent",
"pure compound", "technical ingredient", "technical substance",
"technical principle", "technical component", "technical constituent",
"technical pesticide", "technical agent", "technical compound",
"technical grade", "fundamental substance", "co formulant", "formulation",
"formulant", "formulated", "commercial form", "commercial product",
"commercial mixture", "inactive ingredient", "inert ingredient",
"adjuvant", "safener", "additive", "surfactant", "technical formulation",
"technical mixture"))
rm(list=ls())
nagy_refs <- read.csv("./guy_screening/effort_Guy_nagy_review_refs.csv")
nagy_cited <- read.csv("./guy_screening/effort_Guy_nagy_review_cited.csv")
wos_scopus_final <- read.csv("no_duplicates_manual_check_complete.csv")
nagy_refs$INCLUDE == "YES"
nagy_refs <- nagy_refs [nagy_refs$INCLUDE == "YES", ]
nagy_cited <- nagy_cited [nagy_cited$INCLUDE == "YES", ]
combined <- rbind(wos_scopus_final, nagy_refs, nagy_cited)
View(wos_scopus_final)
View(nagy_refs)
View(nagy_cited)
rm(list=ls())
# import
nagy_refs <- read.csv("./guy_screening/effort_Guy_nagy_review_refs.csv")
nagy_cited <- read.csv("./guy_screening/effort_Guy_nagy_review_cited.csv")
wos_scopus_final <- read.csv("no_duplicates_manual_check_complete.csv")
# filter for YES
nagy_refs <- nagy_refs [nagy_refs$INCLUDE == "YES", ]
nagy_cited <- nagy_cited [nagy_cited$INCLUDE == "YES", ]
# combine
combined <- rbind(wos_scopus_final, nagy_refs, nagy_cited)
View(combined)
no_duplicates <- combined [order(combined$TITLE) [!duplicated(sort(combined$TITLE))], ]
rm(list=ls())
# import
nagy_refs <- read.csv("./guy_screening/effort_Guy_nagy_review_refs.csv")
nagy_cited <- read.csv("./guy_screening/effort_Guy_nagy_review_cited.csv")
wos_scopus_final <- read.csv("no_duplicates_manual_check_complete.csv")
# filter for YES
nagy_refs <- nagy_refs [nagy_refs$INCLUDE == "YES", ]
nagy_cited <- nagy_cited [nagy_cited$INCLUDE == "YES", ]
# combine
combined <- rbind(wos_scopus_final, nagy_refs, nagy_cited)
# make everything lower case
combined$TITLE <- tolower(combined$TITLE)
View(combined)
# replace "-" with " " and ," with ""
combined$TITLE <- gsub(pattern = "-", replacement = " ", x = combined$TITLE)
combined$TITLE <- gsub(pattern = ",", replacement = "", x = combined$TITLE)
no_duplicates <- combined [order(combined$TITLE) [!duplicated(sort(combined$TITLE))], ]
View(no_duplicates)
write.csv("no_duplicates_manual_check_complete_wos_scopus_nagy.csv", no_duplicates)
write.csv(file = "no_duplicates_manual_check_complete_wos_scopus_nagy.csv", x = no_duplicates)
View(no_duplicates)
write.csv(file = "no_duplicates_manual_check_complete_wos_scopus_nagy.csv", x = no_duplicates)
combined [order(combined$TITLE) [duplicated(sort(combined$TITLE))], ]
phases <- c("START_PHASE: 2198 of studies identified through WOS on 9th March 2023",
"START_PHASE: 3758 of studies identified through SCOPUS Search",
"START_PHASE: # of additional studies identified through other sources (snowballing)",
"# of studies with title and abstract screened",
"EXCLUDE_PHASE: # of studies excluded",
"EXCLUDE_PHASE: # of duplicates removed",
"# of full-text articles assessed for eligibility",
"EXCLUDE_PHASE: # of full text studies excluded, not fitting eligibility criteria",
"# of studies included in qualitative synthesis",
"EXCLUDE_PHASE: # of studies excluded, incomplete data reported",
"# of studies included in quantitative synthesis (meta-analysis)"
)
plot_PRISMA(phases)
phases <- c("START_PHASE: 2198 of studies identified through WOS on 9th March 2023",
"START_PHASE: 3758 of studies identified through SCOPUS Search",
"START_PHASE: # of additional studies identified through other sources (back and forward searching of relevant reviews)",
"# of studies with title and abstract screened",
"EXCLUDE_PHASE: # of studies excluded",
"EXCLUDE_PHASE: # of duplicates removed",
"# of full-text articles assessed for eligibility",
"EXCLUDE_PHASE: # of full text studies excluded, not fitting eligibility criteria",
"# of studies included in qualitative synthesis",
"EXCLUDE_PHASE: # of studies excluded, incomplete data reported",
"# of studies included in quantitative synthesis (meta-analysis)"
)
plot_PRISMA(phases)
rm(list=ls())
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
cox_refs <- read.csv("input/cox_review_refs.csv")
library(metagear)
effort_distribute(cox_refs,
reviewers = "Guy",
initialize = TRUE,
save_split = TRUE)
abstract_screener("effort_Guy_cox_review_refs.csv",
"Guy",
highlightKeywords = c("toxic", "effect", "mortal", "viab", "endpoint", "end point", "oxid",
"cell cycle", "dna damage", "apop", "necro", "sensitiv", "growth", "surviv",
"aberra", "health", "fitness", "output", "reproduct", "develop", "behaviour",
"behavior", "fecundity", "offspring", "pesticid", "herbicid", "insecticid",
"fungicid", "acaricid", "miticid", "nematicid", "molluscicid", "rodenticid",
"agrochem", "active ingredient", "active substance", "active principle",
"active component", "active constituent", "active pesticide", "active agent",
"active compound", "pure ingredient", " pure substance", "pure principle",
"pure component", "pure constituent", "pure pesticide", "pure agent",
"pure compound", "technical ingredient", "technical substance",
"technical principle", "technical component", "technical constituent",
"technical pesticide", "technical agent", "technical compound",
"technical grade", "fundamental substance", "co formulant", "formulation",
"formulant", "formulated", "commercial form", "commercial product",
"commercial mixture", "inactive ingredient", "inert ingredient",
"adjuvant", "safener", "additive", "surfactant", "technical formulation",
"technical mixture"))
cox_cited <- read.csv("input/cox_review_cited.csv")
effort_distribute(cox_cited,
reviewers = "Guy",
initialize = TRUE,
save_split = TRUE)
abstract_screener("effort_Guy_cox_review_cited.csv",
"Guy",
highlightKeywords = c("toxic", "effect", "mortal", "viab", "endpoint", "end point", "oxid",
"cell cycle", "dna damage", "apop", "necro", "sensitiv", "growth", "surviv",
"aberra", "health", "fitness", "output", "reproduct", "develop", "behaviour",
"behavior", "fecundity", "offspring", "pesticid", "herbicid", "insecticid",
"fungicid", "acaricid", "miticid", "nematicid", "molluscicid", "rodenticid",
"agrochem", "active ingredient", "active substance", "active principle",
"active component", "active constituent", "active pesticide", "active agent",
"active compound", "pure ingredient", " pure substance", "pure principle",
"pure component", "pure constituent", "pure pesticide", "pure agent",
"pure compound", "technical ingredient", "technical substance",
"technical principle", "technical component", "technical constituent",
"technical pesticide", "technical agent", "technical compound",
"technical grade", "fundamental substance", "co formulant", "formulation",
"formulant", "formulated", "commercial form", "commercial product",
"commercial mixture", "inactive ingredient", "inert ingredient",
"adjuvant", "safener", "additive", "surfactant", "technical formulation",
"technical mixture"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# import
cox_refs <- read.csv("./guy_screening/effort_Guy_cox_review_refs.csv")
cox_cited <- read.csv("./guy_screening/effort_Guy_cox_review_cited.csv")
wos_scopus_final <- read.csv("no_duplicates_manual_check_complete_wos_scopus_nagy.csv")
View(wos_scopus_final)
wos_scopus_final <- read.csv("no_duplicates_manual_check_complete_wos_scopus_nagy.csv")
cox_refs <- cox_refs [cox_refs$INCLUDE == "YES", ]
cox_cited <- cox_cited [cox_cited$INCLUDE == "YES", ]
combined <- rbind(wos_scopus_final, cox_refs, cox_cited)
View(cox_cited)
View(cox_cited)
View(cox_refs)
View(cox_refs)
View(combined)
clr()
# import
cox_refs <- read.csv("./guy_screening/effort_Guy_cox_review_refs.csv")
cox_cited <- read.csv("./guy_screening/effort_Guy_cox_review_cited.csv")
wos_scopus_final <- read.csv("no_duplicates_manual_check_complete_wos_scopus_nagy.csv")
# filter for YES
cox_refs <- cox_refs [cox_refs$INCLUDE == "YES", ]
cox_cited <- cox_cited [cox_cited$INCLUDE == "YES", ]
# combine
combined <- rbind(wos_scopus_final, cox_refs, cox_cited)
View(combined)
# make everything lower case
combined$TITLE <- tolower(combined$TITLE)
combined$TITLE <- gsub(pattern = "-", replacement = " ", x = combined$TITLE)
combined$TITLE <- gsub(pattern = ",", replacement = "", x = combined$TITLE)
no_duplicates <- combined [order(combined$TITLE) [!duplicated(sort(combined$TITLE))], ]
View(no_duplicates)
write.csv(file = "no_duplicates_manual_check_complete_wos_scopus_nagy_cox.csv", x = no_duplicates)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
# import
cox_refs <- read.csv("./guy_screening/effort_Guy_cox_review_refs.csv")
cox_cited <- read.csv("./guy_screening/effort_Guy_cox_review_cited.csv")
wos_scopus_final <- read.csv("no_duplicates_manual_check_complete_wos_scopus_nagy.csv")
cox_refs <- read.csv("./guy_screening/effort_Guy_cox_review_refs.csv")
cox_cited <- read.csv("./guy_screening/effort_Guy_cox_review_cited.csv")
wos_scopus_final <- read.csv("./guy_screening/no_duplicates_manual_check_complete_wos_scopus_nagy.csv")
# filter for YES
cox_refs <- cox_refs [cox_refs$INCLUDE == "YES", ]
cox_cited <- cox_cited [cox_cited$INCLUDE == "YES", ]
# combine
combined <- rbind(wos_scopus_final, cox_refs, cox_cited)
# make everything lower case
combined$TITLE <- tolower(combined$TITLE)
# replace "-" with " " and ," with ""
combined$TITLE <- gsub(pattern = "-", replacement = " ", x = combined$TITLE)
combined$TITLE <- gsub(pattern = ",", replacement = "", x = combined$TITLE)
combined [order(combined$TITLE) [duplicated(sort(combined$TITLE))], ]
